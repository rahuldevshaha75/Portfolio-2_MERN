import {setApiKey as $hgUW1$setApiKey, send as $hgUW1$send} from "@sendgrid/mail";
import {Buffer as $hgUW1$Buffer} from "buffer";

var $df64573ef6d51081$exports = {};
$df64573ef6d51081$exports = JSON.parse('{"name":"nodemailer-sendgrid-create-transport","version":"2.0.0","description":"","type":"module","source":"src/index.ts","main":"dist/main.js","types":"dist/types.d.ts","module":"dist/module.js","scripts":{"watch":"parcel watch","build":"parcel build"},"keywords":["nodemailer","sendgrid"],"author":"Andris Reinman","license":"MIT","dependencies":{"@sendgrid/mail":"^6.2.1"},"devDependencies":{"@parcel/packager-ts":"2.9.2","@parcel/transformer-typescript-types":"2.9.2","@types/nodemailer":"^6.4.8","eslint-config-nodemailer":"^1.2.0","nodemailer":"^6.9.3","parcel":"^2.9.2","typescript":">=3.0.0"}}');




var $e2e1ea6dd3b7d2e1$require$Buffer = $hgUW1$Buffer;
const $e2e1ea6dd3b7d2e1$export$e2bf61c61cea5a42 = (value)=>{
    return $e2e1ea6dd3b7d2e1$require$Buffer.isBuffer(value) ? value.toString() : value;
};
const $e2e1ea6dd3b7d2e1$export$4e62c701997796c1 = (value)=>{
    return typeof value !== "undefined";
};
const $e2e1ea6dd3b7d2e1$export$c10ebd12130bd752 = (entry)=>{
    if (typeof entry == "string") return entry;
    return {
        name: entry.name,
        email: entry.address
    };
};


class $a302058d3e7f8260$export$fbf60eb5c5bd4672 {
}


class $149c1bd638913645$var$SendGridTransport extends (0, $a302058d3e7f8260$export$fbf60eb5c5bd4672) {
    constructor(options){
        super();
        this.options = options || {};
        this.name = (0, $df64573ef6d51081$exports.name);
        this.version = (0, $df64573ef6d51081$exports.version);
        if (options.apiKey) (0, $hgUW1$setApiKey)(options.apiKey);
    }
    async send(mail, callback) {
        mail.normalize((err, source)=>{
            if (err) return callback(err, null);
            const wow = source ?? {};
            const msg = {};
            Object.keys(wow || {}).forEach((key)=>{
                switch(key){
                    case "subject":
                    case "text":
                    case "html":
                        msg[key] = wow[key];
                        break;
                    case "from":
                    case "replyTo":
                        msg[key] = [
                            wow[key] ?? []
                        ].flat().map((0, $e2e1ea6dd3b7d2e1$export$c10ebd12130bd752)).shift();
                        break;
                    case "to":
                    case "cc":
                    case "bcc":
                        msg[key] = [
                            wow[key] ?? []
                        ].flat().map((0, $e2e1ea6dd3b7d2e1$export$c10ebd12130bd752));
                        break;
                    case "attachments":
                        this.handleAttachments(wow, msg);
                        break;
                    case "alternatives":
                        this.handleAlternatives(wow, msg);
                        break;
                    case "icalEvent":
                        {
                            let attachment = {
                                content: (0, $e2e1ea6dd3b7d2e1$export$e2bf61c61cea5a42)(wow.icalEvent.content ?? ""),
                                filename: wow.icalEvent.filename || "invite.ics",
                                type: "application/ics",
                                disposition: "attachment"
                            };
                            msg.attachments = (msg.attachments ?? []).concat(attachment);
                        }
                        break;
                    case "watchHtml":
                        {
                            let alternative = {
                                content: wow.watchHtml,
                                type: "text/watch-html"
                            };
                            msg.content = (msg.content ?? []).concat(alternative);
                        }
                        break;
                    case "normalizedHeaders":
                        break;
                    case "messageId":
                        msg.headers = msg.headers || {};
                        msg.headers["message-id"] = wow.messageId;
                        break;
                    default:
                        msg[key] = wow[key];
                }
            });
            if (msg.content && msg.content.length) {
                if (msg.text) {
                    msg.content.unshift({
                        type: "text/plain",
                        value: msg.text
                    });
                    delete msg.text;
                }
                if (msg.html) {
                    msg.content.unshift({
                        type: "text/html",
                        value: msg.html
                    });
                    delete msg.html;
                }
            }
            (0, $hgUW1$send)(msg, callback);
        });
    }
    handleAlternatives(wow, msg) {
        if (!wow.alternatives) return;
        let alternatives = wow.alternatives.map((entry)=>{
            let alternative = {
                value: (0, $e2e1ea6dd3b7d2e1$export$e2bf61c61cea5a42)(entry.content ?? ""),
                type: entry.contentType
            };
            return alternative;
        });
        msg.content = (msg.content ?? []).concat(alternatives);
    }
    handleAttachments(wow, msg) {
        let attachments = (wow.attachments ?? []).map((entry)=>{
            if (!entry.content || !entry.filename) return;
            let attachment = {
                content: (0, $e2e1ea6dd3b7d2e1$export$e2bf61c61cea5a42)(entry.content),
                filename: entry.filename,
                type: entry.contentType,
                disposition: "attachment"
            };
            if (entry.cid) {
                attachment.contentId = entry.cid;
                attachment.disposition = "inline";
            }
            return attachment;
        }).filter((0, $e2e1ea6dd3b7d2e1$export$4e62c701997796c1));
        msg.attachments = (msg.attachments ?? []).concat(attachments);
    }
}
const $149c1bd638913645$export$242e68b76e230f1b = (options)=>new $149c1bd638913645$var$SendGridTransport(options);
var $149c1bd638913645$export$2e2bcd8739ae039 = $149c1bd638913645$export$242e68b76e230f1b;


export {$149c1bd638913645$export$242e68b76e230f1b as createSendGridTransport, $149c1bd638913645$export$2e2bcd8739ae039 as default};
//# sourceMappingURL=main.js.map
